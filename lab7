//Write a program that demonstrates handling of exceptions in inheritance tree. Create a base class called “Father” and derived class called “Son” which extends the base class. In Father class, implement a constructor which 
takes the age and throws the exception WrongAge( ) when the input age<0. In Son class, implement a constructor that uses both father and son’s age and throws an 
exception if son’s age is >=father’s age.
// Custom exception class for handling age-related errors
class WrongAgeException extends Exception {
    public WrongAgeException(String message) {
        super(message);
    }
}

class Father {
    int age;
    public Father(int age) throws WrongAgeException {
        if (age < 0) {
            throw new WrongAgeException("Age cannot be negative.");
        }
        this.age = age;
    }
}

class Son extends Father {
    int sonAge;

    public Son(int fatherAge, int sonAge) throws WrongAgeException {
        super(fatherAge); // Call the base class constructor

        if (sonAge >= fatherAge) {
            throw new WrongAgeException("Son's age cannot be greater than or equal to father's age.");
        }
        this.sonAge = sonAge;
    }
}

public class Main {
    public static void main(String[] args) {
        try {
          
            Father father = new Father(-1); 
        } catch (WrongAgeException e) {
            System.out.println("Error: " + e.getMessage());
        }

        try {
          
            Son son = new Son(30, 35); 
        } catch (WrongAgeException e) {
            System.out.println("Error: " + e.getMessage());
        }

        try {
            Son validSon = new Son(40, 20); 
            System.out.println("Father's age: " + validSon.age + ", Son's age: " + validSon.sonAge);
        } catch (WrongAgeException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}

